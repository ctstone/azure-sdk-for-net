// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.FormRecognizer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Text extracted from a page in the input document.
    /// </summary>
    public partial class ReadResult
    {
        /// <summary>
        /// Initializes a new instance of the ReadResult class.
        /// </summary>
        public ReadResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReadResult class.
        /// </summary>
        /// <param name="page">The 1-based page number in the input
        /// document.</param>
        /// <param name="angle">The general orientation of the text in
        /// clockwise direction, measured in degrees between (-180,
        /// 180].</param>
        /// <param name="width">The width of the image/PDF in pixels/inches,
        /// respectively.</param>
        /// <param name="height">The height of the image/PDF in pixels/inches,
        /// respectively.</param>
        /// <param name="unit">The unit used by the width, height and
        /// boundingBox properties. For images, the unit is "pixel". For PDF,
        /// the unit is "inch". Possible values include: 'pixel',
        /// 'inch'</param>
        /// <param name="language">The detected language on the page overall.
        /// Possible values include: 'en', 'es'</param>
        /// <param name="lines">When includeTextDetails is set to true, a list
        /// of recognized text lines. The maximum number of lines returned is
        /// 300 per page. The lines are sorted top to bottom, left to right,
        /// although in certain cases proximity is treated with higher
        /// priority. As the sorting order depends on the detected text, it may
        /// change across images and OCR version updates. Thus, business logic
        /// should be built upon the actual line location instead of
        /// order.</param>
        public ReadResult(int page, double angle, double width, double height, LengthUnit unit, string language = default(string), IList<TextLine> lines = default(IList<TextLine>))
        {
            Page = page;
            Angle = angle;
            Width = width;
            Height = height;
            Unit = unit;
            Language = language;
            Lines = lines;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the 1-based page number in the input document.
        /// </summary>
        [JsonProperty(PropertyName = "page")]
        public int Page { get; set; }

        /// <summary>
        /// Gets or sets the general orientation of the text in clockwise
        /// direction, measured in degrees between (-180, 180].
        /// </summary>
        [JsonProperty(PropertyName = "angle")]
        public double Angle { get; set; }

        /// <summary>
        /// Gets or sets the width of the image/PDF in pixels/inches,
        /// respectively.
        /// </summary>
        [JsonProperty(PropertyName = "width")]
        public double Width { get; set; }

        /// <summary>
        /// Gets or sets the height of the image/PDF in pixels/inches,
        /// respectively.
        /// </summary>
        [JsonProperty(PropertyName = "height")]
        public double Height { get; set; }

        /// <summary>
        /// Gets or sets the unit used by the width, height and boundingBox
        /// properties. For images, the unit is "pixel". For PDF, the unit is
        /// "inch". Possible values include: 'pixel', 'inch'
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public LengthUnit Unit { get; set; }

        /// <summary>
        /// Gets or sets the detected language on the page overall. Possible
        /// values include: 'en', 'es'
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets when includeTextDetails is set to true, a list of
        /// recognized text lines. The maximum number of lines returned is 300
        /// per page. The lines are sorted top to bottom, left to right,
        /// although in certain cases proximity is treated with higher
        /// priority. As the sorting order depends on the detected text, it may
        /// change across images and OCR version updates. Thus, business logic
        /// should be built upon the actual line location instead of order.
        /// </summary>
        [JsonProperty(PropertyName = "lines")]
        public IList<TextLine> Lines { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Page < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Page", 1);
            }
            if (Angle > 180)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Angle", 180);
            }
            if (Angle <= -180)
            {
                throw new ValidationException(ValidationRules.ExclusiveMinimum, "Angle", -180);
            }
            if (Width < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Width", 0);
            }
            if (Height < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Height", 0);
            }
            if (Lines != null)
            {
                foreach (var element in Lines)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
