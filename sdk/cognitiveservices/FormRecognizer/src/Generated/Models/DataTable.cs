// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.FormRecognizer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information about the extracted table contained in a page.
    /// </summary>
    public partial class DataTable
    {
        /// <summary>
        /// Initializes a new instance of the DataTable class.
        /// </summary>
        public DataTable()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataTable class.
        /// </summary>
        /// <param name="rows">Number of rows.</param>
        /// <param name="columns">Number of columns.</param>
        /// <param name="cells">List of cells contained in the table.</param>
        public DataTable(int rows, int columns, IList<DataTableCell> cells)
        {
            Rows = rows;
            Columns = columns;
            Cells = cells;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets number of rows.
        /// </summary>
        [JsonProperty(PropertyName = "rows")]
        public int Rows { get; set; }

        /// <summary>
        /// Gets or sets number of columns.
        /// </summary>
        [JsonProperty(PropertyName = "columns")]
        public int Columns { get; set; }

        /// <summary>
        /// Gets or sets list of cells contained in the table.
        /// </summary>
        [JsonProperty(PropertyName = "cells")]
        public IList<DataTableCell> Cells { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Cells == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Cells");
            }
            if (Rows < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Rows", 1);
            }
            if (Columns < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Columns", 1);
            }
            if (Cells != null)
            {
                foreach (var element in Cells)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
