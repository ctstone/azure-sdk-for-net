// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.FormRecognizer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A set of extracted fields corresponding to the input document.
    /// </summary>
    public partial class DocumentResult
    {
        /// <summary>
        /// Initializes a new instance of the DocumentResult class.
        /// </summary>
        public DocumentResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentResult class.
        /// </summary>
        /// <param name="docType">Document type.</param>
        /// <param name="pageRange">First and last page number where the
        /// document is found.</param>
        /// <param name="fields">Dictionary of named field values.</param>
        public DocumentResult(string docType, IList<int> pageRange, IDictionary<string, FieldValue> fields)
        {
            DocType = docType;
            PageRange = pageRange;
            Fields = fields;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets document type.
        /// </summary>
        [JsonProperty(PropertyName = "docType")]
        public string DocType { get; set; }

        /// <summary>
        /// Gets or sets first and last page number where the document is
        /// found.
        /// </summary>
        [JsonProperty(PropertyName = "pageRange")]
        public IList<int> PageRange { get; set; }

        /// <summary>
        /// Gets or sets dictionary of named field values.
        /// </summary>
        [JsonProperty(PropertyName = "fields")]
        public IDictionary<string, FieldValue> Fields { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DocType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DocType");
            }
            if (PageRange == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PageRange");
            }
            if (Fields == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fields");
            }
            if (PageRange != null)
            {
                if (PageRange.Count > 2)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "PageRange", 2);
                }
                if (PageRange.Count < 2)
                {
                    throw new ValidationException(ValidationRules.MinItems, "PageRange", 2);
                }
            }
            if (Fields != null)
            {
                foreach (var valueElement in Fields.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
        }
    }
}
