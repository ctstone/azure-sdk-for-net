// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.CognitiveServices.FormRecognizer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Information about the extracted key-value pair.
    /// </summary>
    public partial class KeyValuePair
    {
        /// <summary>
        /// Initializes a new instance of the KeyValuePair class.
        /// </summary>
        public KeyValuePair()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KeyValuePair class.
        /// </summary>
        /// <param name="key">Information about the extracted key in a
        /// key-value pair.</param>
        /// <param name="value">Information about the extracted value in a
        /// key-value pair.</param>
        /// <param name="confidence">Confidence value.</param>
        /// <param name="label">A user defined label for the key/value pair
        /// entry.</param>
        public KeyValuePair(KeyValueElement key, KeyValueElement value, double confidence, string label = default(string))
        {
            Label = label;
            Key = key;
            Value = value;
            Confidence = confidence;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a user defined label for the key/value pair entry.
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets information about the extracted key in a key-value
        /// pair.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public KeyValueElement Key { get; set; }

        /// <summary>
        /// Gets or sets information about the extracted value in a key-value
        /// pair.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public KeyValueElement Value { get; set; }

        /// <summary>
        /// Gets or sets confidence value.
        /// </summary>
        [JsonProperty(PropertyName = "confidence")]
        public double Confidence { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Key == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Key");
            }
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
            if (Key != null)
            {
                Key.Validate();
            }
            if (Value != null)
            {
                Value.Validate();
            }
        }
    }
}
